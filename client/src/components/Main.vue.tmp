<template>
  <div class="reservations">
    <h2>Reservations</h2>
    <div>
      <div class="reservation-form form-group">
        <label for="date">Date</label>
        <input type="date" class="form-control" id="date" placeholder="Enter datetime" v-model="date">
      </div>
      <div class="reservation-form form-group">
        <label for="time">Time</label>
        <input type="time" class="form-control" id="time" placeholder="Enter datetime" v-model="time">
      </div>
      <div class="form-group">
        <button v-on:click="searchOccupied" class="btn btn-primary">Search</button>
      </div>
      <div class="reservation-form form-group">
        <label for="select">Capacity</label>
        <select v-model="capacitySelected" multiple="" class="form-control" id="select">
          <option v-for="option in capacity" v-bind:value="option" :key="option">
            {{ option }}
          </option>
        </select>
      </div>
      <div class="reservation-form form-group">
        <label for="select2">Equipements</label>
        <select v-model="equipementsSelected" multiple="" class="form-control" id="select2">
          <option v-for="option in equipements" v-bind:value="option" :key="option">
            {{ option }}
          </option>
        </select>
      </div>
    </div>
    <Search v-bind:equipements="equipements"
      v-bind:capacity="capacity"
      v-bind:equipementsSelected="equipementsSelected"
      v-on:update-equipementsSelected="equipementsSelected = $event"
      v-bind:capacitySelected="capacitySelected"
      v-on:update-capacitySelected="capacitySelected = $event"
      v-on:search-occupied="searchOccupied()"
      v-on:update-datetime="datetime = $event"/>
    <Rooms v-on:update="searchOccupied()" v-if="searched" v-bind:rooms="roomsFiltered" v-bind:datetime="datetime"/>
  </div>
</template>

<script>
import axios from 'axios';
import Rooms from './Rooms.vue'
import Search from './Search.vue'

export default {
  name: 'Main',
  components: {
    Rooms,
    Search
  },
  data () {
    return {
      rooms: [],
      capacity: [],
      equipements: [],
      capacitySelected: [],
      equipementsSelected: [],
      roomsOccupied: [],
      date: null,
      time: null,
      datetime: null,
      searched: false
    }
  },
  mounted () {
    axios
      .get('http://0.0.0.0:3000/rooms')
      .then(response => {
        // JSON responses are automatically parsed.
        this.rooms = response.data.rooms;
        this.capacity = this.rooms.map(function(room) {
          return room.capacity;
        });
        this.capacity = this.capacity.filter(function(capacity, index, self) {
          return self.indexOf(capacity) === index;
        })
        for (let i = 0; i < this.rooms.length; i++)
        {
          for (let j = 0; j < this.rooms[i].equipements.length; j++)
          {
            if (this.equipements.indexOf(this.rooms[i].equipements[j].name) == -1)
              this.equipements.push(this.rooms[i].equipements[j].name)
          }
        }
      })
  },
  computed: {
    roomsFiltered: function () {
      let vm = this;

      function containEquipementRoom(room, equipement) {
        for (let i = 0; i < room.equipements.length; i++)
        {
          if (room.equipements[i].name == equipement)
            return true;
        }
        return false;
      }

      function containEquipement(room) {
        for (let i = 0; i < vm.equipementsSelected.length; i++)
        {
          if (!containEquipementRoom(room, vm.equipementsSelected[i]))
            return false;
        }
        return true;
      }

      function containRoomName(room) {
        for (let i = 0; i < vm.roomsOccupied.length; i++)
        {
          if (room.name === vm.roomsOccupied[i])
            return true;
        }
        return false;
      }

      return this.rooms.filter(function (room) {
        if (room)
        {
          return (vm.capacitySelected.length == 0 || vm.capacitySelected.indexOf(room.capacity) != -1) &&
          (vm.equipementsSelected.length == 0 || containEquipement(room)) &&
          (vm.roomsOccupied.length == 0 || !containRoomName(room));
        }
      })
    }
  },
  methods: {
    searchOccupied: function () {
      // if (!this.datetime) {
      //   alert('Please choose a date and a time');
      //   return;
      // }
      console.log(this.datetime);
      this.roomsOccupied = [];
      axios.post('http://0.0.0.0:3000/rooms/occupied', {
        datetime: this.datetime
      }).then(response => {
        this.searched = true;
        for (var i = 0; i < response.data.length; i++) {
          this.roomsOccupied.push(response.data[i].room)
        }
      });
    }
  }
}
</script>

<style scoped>
.reservations {
  margin-top: 30px;
}
.reservation-form {
  width: 50%;
  display: inline-block;
}
.card {
  display: inline-block;
}
</style>
